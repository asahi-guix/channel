#!/usr/bin/env bash

set -euxo pipefail
set -x

ARCH=$(uname -m)
TIMEZONE="Etc/UTC"
LOCALE="en_US.utf8"
USERNAME="asahi-guix"
USER_COMMENT="Asahi Guix"
USER_PASSWORD="6a4NQqrp84Y7mj56"
HOSTNAME='asahi-guix'

###### MODIFY END

if [ "$USER_PASSWORD" == "6a4NQqrp84Y7mj56" ]; then
	echo "######### IMPORTANT #########"
	echo "You did not modify the default user password. Overwriting ..."
	USER_PASSWORD=$(openssl rand -base64 24)
	echo
	echo "#########"
	echo $USER_PASSWORD
	echo "#########"
	echo
fi

CONFIG=/etc/bootstrap-config.scm
CHANNELS=/etc/channels.scm
CRYPT='$6$abc'

apt-get update
apt-get install xz-utils -y
wget -nv "https://ci.guix.gnu.org/search/latest/archive?query=spec:tarball+status:success+system:$ARCH-linux+guix-binary.tar.xz" -O "guix-binary-nightly.$ARCH-linux.tar.xz"
cd /tmp
tar --warning=no-timestamp -xf "$HOME/guix-binary-nightly.$ARCH-linux.tar.xz"
mv var/guix /var/ && mv gnu /
mkdir -p ~root/.config/guix
ln -sf /var/guix/profiles/per-user/root/current-guix ~root/.config/guix/current
export GUIX_PROFILE="`echo ~root`/.config/guix/current" ;
source $GUIX_PROFILE/etc/profile
groupadd --system --force guixbuild
for i in `seq -w 1 10`; do
   userdel -f guixbuilder$i || true
   useradd -g guixbuild -G guixbuild         \
           -d /var/empty -s `which nologin`  \
           -c "Guix build user $i" --system  \
           guixbuilder$i;
done;
cp ~root/.config/guix/current/lib/systemd/system/guix-daemon.service /etc/systemd/system/
systemctl start guix-daemon && systemctl enable guix-daemon
mkdir -p /usr/local/bin
cd /usr/local/bin
ln -sf /var/guix/profiles/per-user/root/current-guix/bin/guix
mkdir -p /usr/local/share/info
cd /usr/local/share/info
for i in /var/guix/profiles/per-user/root/current-guix/share/info/*; do
    ln -sf $i;
done
guix archive --authorize < ~root/.config/guix/current/share/guix/bordeaux.guix.gnu.org.pub
guix archive --authorize < ~root/.config/guix/current/share/guix/ci.guix.gnu.org.pub
# guix pull
guix package -i glibc-utf8-locales-2.29
export GUIX_LOCPATH="$HOME/.guix-profile/lib/locale"
guix package -i openssl
cat > /etc/bootstrap-config.scm << EOF
(use-modules (gnu))
(use-service-modules networking ssh)
(use-package-modules certs linux screen ssh certs tls)

(define %initrd-modules
  '("virtio_pci" "virtio_balloon" "virtio_blk"))

(define %bootloader
  (bootloader-configuration
   (bootloader grub-efi-bootloader)
   (targets (list "/boot/efi"))))

(define %file-systems
  (cons* (file-system
           (mount-point "/")
           (device "/dev/sda1")
           (type "ext4")
           (needed-for-boot? #t))
          (file-system
           (mount-point "/boot/efi")
           (device "/dev/sda15")
           (type "vfat"))
         %base-file-systems))

(operating-system
  (host-name "${HOSTNAME}")
  (timezone "${TIMEZONE}")
  (locale "${LOCALE}")
  (bootloader %bootloader)
  (initrd-modules %initrd-modules)
  (kernel linux-libre-arm64-generic)
  (file-systems %file-systems)
  (users (cons (user-account
                (name "${USERNAME}")
                (comment "${USER_COMMENT}")
                (group "users")
		        (password (crypt "${USER_PASSWORD}" "${CRYPT}"))

                (supplementary-groups '("wheel"))
                (home-directory "/home/${USERNAME}"))
               %base-user-accounts))
  (packages (cons* openssh gnutls %base-packages))
  (services (cons*
  (service dhcp-client-service-type)
  (service openssh-service-type
  		  (openssh-configuration
		  (permit-root-login 'without-password)))
  %base-services)))
EOF
# guix pull
guix system build /etc/bootstrap-config.scm
guix system reconfigure --dry-run /etc/bootstrap-config.scm
guix system reconfigure /etc/bootstrap-config.scm || true
[ ! -d /old-etc ] && mv /etc /old-etc
mkdir -p /etc
cp -r /old-etc/{passwd,group,shadow,gshadow,mtab,guix,bootstrap-config.scm,resolv.conf,ssl} /etc/
guix system reconfigure /etc/bootstrap-config.scm || true
rm -rf /etc/ssl
guix system reconfigure /etc/bootstrap-config.scm
